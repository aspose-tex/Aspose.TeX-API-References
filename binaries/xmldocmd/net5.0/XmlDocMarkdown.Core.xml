<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XmlDocMarkdown.Core</name>
    </assembly>
    <members>
        <member name="T:XmlDocMarkdown.Core.ArgsReader">
            <summary>
            Helps process command-line arguments.
            </summary>
            <remarks>To use this class, construct an <c>ArgsReader</c> with the command-line arguments from <c>Main</c>,
            read the supported options one at a time with <see cref="M:XmlDocMarkdown.Core.ArgsReader.ReadFlag(System.String)" /> and <see cref="M:XmlDocMarkdown.Core.ArgsReader.ReadOption(System.String)"/>,
            read any normal arguments with <see cref="M:XmlDocMarkdown.Core.ArgsReader.ReadArgument"/>, and finally call <see cref="M:XmlDocMarkdown.Core.ArgsReader.VerifyComplete"/>,
            which throws an <see cref="T:XmlDocMarkdown.Core.ArgsReaderException"/> if any unsupported options or arguments haven't been read.</remarks>
        </member>
        <member name="M:XmlDocMarkdown.Core.ArgsReader.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a reader for the specified command-line arguments.
            </summary>
            <param name="args">The command-line arguments from <c>Main</c>.</param>
            <exception cref="T:System.ArgumentNullException"><c>args</c> is <c>null</c>.</exception>
        </member>
        <member name="P:XmlDocMarkdown.Core.ArgsReader.ShortOptionIgnoreCase">
            <summary>
            True if short options (e.g. <c>-h</c>) should ignore case. (Default false.)
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.ArgsReader.LongOptionIgnoreCase">
            <summary>
            True if long options (e.g. <c>--help</c>) should ignore case. (Default false.)
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.ArgsReader.LongOptionIgnoreKebabCase">
            <summary>
            True if long options (e.g. <c>--dry-run</c>) should ignore "kebab case", i.e. allow <c>--dryrun</c>. (Default false.)
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.ArgsReader.NoOptionsAfterDoubleDash">
            <summary>
            True if <c>--</c> is ignored and all following arguments are not read as options. (Default false.)
            </summary>
        </member>
        <member name="M:XmlDocMarkdown.Core.ArgsReader.ReadFlag(System.String)">
            <summary>
            Reads the specified flag, returning true if it is found.
            </summary>
            <param name="name">The name of the specified flag.</param>
            <returns>True if the specified flag was found on the command line.</returns>
            <remarks><para>If the flag is found, the method returns <c>true</c> and the flag is
            removed. If <c>ReadFlag</c> is called again with the same name, it will return <c>false</c>,
            unless the same flag appears twice on the command line.</para>
            <para>To support multiple names for the same flag, use a <c>|</c> to separate them,
            e.g. use <c>help|h|?</c> to support three different names for a help flag.</para>
            <para>Single-character names use a single hyphen, e.g. <c>-h</c>. Longer names
            use a double hyphen, e.g. <c>--help</c>.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><c>name</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">One of the names is empty.</exception>
        </member>
        <member name="M:XmlDocMarkdown.Core.ArgsReader.ReadOption(System.String)">
            <summary>
            Reads the value of the specified option, if any.
            </summary>
            <param name="name">The name of the specified option.</param>
            <returns>The specified option if it was found on the command line; <c>null</c> otherwise.</returns>
            <remarks><para>If the option is found, the method returns the command-line argument
            after the option and both arguments are removed. If <c>ReadOption</c> is called again with the
            same name, it will return <c>null</c>, unless the same option appears twice on the command line.</para>
            <para>To support multiple names for the same option, use a vertical bar (<c>|</c>) to separate them,
            e.g. use <c>n|name</c> to support two different names for a module option.</para>
            <para>Single-character names use a single hyphen, e.g. <c>-n example</c>. Longer names use a
            double hyphen, e.g. <c>--name example</c>.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><c>name</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">One of the names is empty.</exception>
            <exception cref="T:XmlDocMarkdown.Core.ArgsReaderException">The argument that must follow the option is missing.</exception>
        </member>
        <member name="M:XmlDocMarkdown.Core.ArgsReader.ReadArgument">
            <summary>
            Reads the next non-option argument.
            </summary>
            <returns>The next non-option argument, or null if none remain.</returns>
            <remarks><para>If the next argument is an option, this method throws an exception.
            If options can appear before normal arguments, be sure to read all options before reading
            any normal arguments.</para></remarks>
            <exception cref="T:XmlDocMarkdown.Core.ArgsReaderException">The next argument is an option.</exception>
        </member>
        <member name="M:XmlDocMarkdown.Core.ArgsReader.ReadArguments">
            <summary>
            Reads any remaining non-option arguments.
            </summary>
            <returns>The remaining non-option arguments, if any.</returns>
            <remarks><para>If any remaining arguments are options, this method throws an exception.
            If options can appear before normal arguments, be sure to read all options before reading
            any normal arguments.</para></remarks>
            <exception cref="T:XmlDocMarkdown.Core.ArgsReaderException">A remaining argument is an option.</exception>
        </member>
        <member name="M:XmlDocMarkdown.Core.ArgsReader.VerifyComplete">
            <summary>
            Confirms that all arguments were processed.
            </summary>
            <exception cref="T:XmlDocMarkdown.Core.ArgsReaderException">A command-line argument was not read.</exception>
        </member>
        <member name="T:XmlDocMarkdown.Core.ArgsReaderException">
            <summary>
            Thrown when an error occurs while processing command-line arguments.
            </summary>
        </member>
        <member name="M:XmlDocMarkdown.Core.ArgsReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:XmlDocMarkdown.Core.ExternalDocumentation">
            <summary>
            Configures external documentation.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.ExternalDocumentation.Namespace">
            <summary>
            The namespace to configure.
            </summary>
        </member>
        <member name="T:XmlDocMarkdown.Core.XmlDocInput">
            <summary>
            The input for generating Markdown from .NET XML documentation comments.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocInput.AssemblyPath">
            <summary>
            The path of the assembly to load.
            </summary>
            <remarks>Optional; uses <c>Assembly</c> if omitted.</remarks>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocInput.Assembly">
            <summary>
            An already-loaded assembly.
            </summary>
            <remarks>Optional; uses <c>AssemblyPath</c> if omitted.</remarks>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocInput.XmlDocPath">
            <summary>
            The path of the XML documentation for the assembly.
            </summary>
            <remarks>Optional; changes the extension of <c>AssemblyPath</c> or <c>Assembly.Location</c> if omitted.</remarks>
        </member>
        <member name="T:XmlDocMarkdown.Core.XmlDocMarkdownApp">
            <summary>
            Implements the command-line application.
            </summary>
        </member>
        <member name="M:XmlDocMarkdown.Core.XmlDocMarkdownApp.Run(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Run the command-line application.
            </summary>
            <param name="args">The command-line arguments.</param>
            <returns>The exit code.</returns>
        </member>
        <member name="T:XmlDocMarkdown.Core.XmlDocMarkdownGenerator">
            <summary>
            Generates Markdown from .NET XML documentation comments.
            </summary>
        </member>
        <member name="M:XmlDocMarkdown.Core.XmlDocMarkdownGenerator.Generate(System.String,System.String,XmlDocMarkdown.Core.XmlDocMarkdownSettings)">
            <summary>
            Generates Markdown from .NET XML documentation comments.
            </summary>
            <param name="inputPath">The input assembly.</param>
            <param name="outputPath">The output directory.</param>
            <param name="settings">The settings.</param>
            <returns>The names of files that were added, changed, or removed.</returns>
        </member>
        <member name="M:XmlDocMarkdown.Core.XmlDocMarkdownGenerator.Generate(XmlDocMarkdown.Core.XmlDocInput,System.String,XmlDocMarkdown.Core.XmlDocMarkdownSettings)">
            <summary>
            Generates Markdown from .NET XML documentation comments.
            </summary>
            <param name="input">The input.</param>
            <param name="outputPath">The output directory.</param>
            <param name="settings">The settings.</param>
            <returns>The names of files that were added, changed, or removed.</returns>
        </member>
        <member name="T:XmlDocMarkdown.Core.XmlDocMarkdownResult">
            <summary>
            The names of files that were added, changed, or removed.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownResult.Added">
            <summary>
            The names of files that were added.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownResult.Changed">
            <summary>
            The names of files that were changed.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownResult.Removed">
            <summary>
            The names of files that were removed.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownResult.Messages">
            <summary>
            Messages that should be displayed (unless quiet).
            </summary>
        </member>
        <member name="T:XmlDocMarkdown.Core.XmlDocMarkdownSettings">
            <summary>
            Settings for markdown generation.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.SourceCodePath">
            <summary>
            The URL of the folder containing the source code of the assembly, e.g. at GitHub.
            </summary>
            <remarks>The URL may be absolute or relative. Required to generate source code
            links in the See Also sections for types.</remarks>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.RootNamespace">
            <summary>
            The root namespace of the input assembly.
            </summary>
            <remarks>Used to generate source code links in the See Also sections for types.
            If omitted, the tool guesses the root namespace from the exported types.</remarks>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.IncludeObsolete">
            <summary>
            If true, generates documentation for obsolete types and members. (Default false.)
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.SkipUnbrowsable">
            <summary>
            If true, skips documentation for types and members with <c>[EditorBrowsable(EditorBrowsableState.Never)]</c>.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.VisibilityLevel">
            <summary>
            The minimum visibility for documented types and members.
            </summary>
            <remarks>Defaults to <c>Protected</c>.</remarks>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.NewLine">
            <summary>
            Indicates the newline used in the output.
            </summary>
            <remarks>Defaults to <c>"\r\n"</c> or <c>"\n"</c>, depending on the platform.</remarks>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.ShouldClean">
            <summary>
            If true, deletes previously generated files that are no longer used.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.GenerateToc">
            <summary>
            If true, generates a .yml file that can be used in a Jekyll based site.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.NamespacePages">
            <summary>
            Generate separate pages for each namespace containing list of types in each.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.TocPrefix">
            <summary>
            A path prefix to add to all links in the table of contents .yml file.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.IsQuiet">
            <summary>
            If true, suppresses normal console output.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.IsDryRun">
            <summary>
            If true, executes without making changes to the file system.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.FrontMatter">
            <summary>
            If non-null, contains the path to a file that contains the Jekyll front matter template.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.PermalinkStyle">
            <summary>
            Specify permalink style, 'none' or 'pretty' (default 'none').
            'pretty' permalinks do not contain file extensions, and when you select this option
            periods have to be removed from file names, for example, 'System.Console' would have to be 'SystemConsole'.
            since the removal of the '.md' extension would make Jekyll think '.Console' is a file extension which doesn't work.
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.RootPageFrontMatter">
            <summary>
            Sepcify [oot page front matter
            </summary>
        </member>
        <member name="P:XmlDocMarkdown.Core.XmlDocMarkdownSettings.ExternalDocs">
            <summary>
            Configures external documentation.
            </summary>
        </member>
        <member name="T:XmlDocMarkdown.Core.XmlDocToc">
            <summary>
            This class builds a .yml table of contents along the lines of what you see here:
            https://jekyllrb.com/tutorials/navigation/#scenario-4-three-level-navigation-list
            </summary>
        </member>
        <member name="T:XmlDocMarkdown.Core.XmlDocVisibilityLevel">
            <summary>
            The minimum visibility for documented types and members.
            </summary>
        </member>
        <member name="F:XmlDocMarkdown.Core.XmlDocVisibilityLevel.Private">
            <summary>
            All types and members are documented.
            </summary>
        </member>
        <member name="F:XmlDocMarkdown.Core.XmlDocVisibilityLevel.Internal">
            <summary>
            Only public, protected, and internal types and members are documented.
            </summary>
        </member>
        <member name="F:XmlDocMarkdown.Core.XmlDocVisibilityLevel.Protected">
            <summary>
            Only public and protected types and members are documented.
            </summary>
        </member>
        <member name="F:XmlDocMarkdown.Core.XmlDocVisibilityLevel.ProtectedInternal">
            <summary>
            Reserved for internal use.
            </summary>
        </member>
        <member name="F:XmlDocMarkdown.Core.XmlDocVisibilityLevel.Public">
            <summary>
            Only public types and members are documented.
            </summary>
        </member>
    </members>
</doc>
